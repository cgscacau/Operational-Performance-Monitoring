# app.py

import streamlit as st

# ==================== CONFIGURA√á√ÉO ====================
st.set_page_config(
    page_title="An√°lise de Metas de DF e UF",
    page_icon="üéØ",
    layout="wide"
)

st.title("üéØ An√°lise de Metas: Disponibilidade F√≠sica (DF) e Utiliza√ß√£o (UF)")
st.markdown("Verifique se seus equipamentos atingir√£o as metas de DF e UF do m√™s.")

# ==================== ENTRADAS ====================
st.sidebar.header("üìã Configura√ß√£o")

st.sidebar.subheader("Metas do M√™s")
df_meta = st.sidebar.number_input(
    "Meta de DF (%)",
    min_value=0.0,
    max_value=100.0,
    value=92.0,
    step=0.1,
    help="Disponibilidade F√≠sica: % do tempo que o equipamento est√° dispon√≠vel (n√£o quebrado)"
)

uf_meta = st.sidebar.number_input(
    "Meta de UF (%)",
    min_value=0.0,
    max_value=100.0,
    value=85.0,
    step=0.1,
    help="Fator de Utiliza√ß√£o: % do tempo dispon√≠vel que o equipamento foi efetivamente usado"
)

st.sidebar.divider()

st.sidebar.subheader("Dados do Equipamento")
nome_equipamento = st.sidebar.text_input(
    "Nome/ID do Equipamento",
    value="CAM-001",
    help="Identifica√ß√£o do equipamento"
)

mtbf = st.sidebar.number_input(
    "MTBF (horas)",
    min_value=1,
    value=500,
    help="Tempo M√©dio Entre Falhas"
)

mttr = st.sidebar.number_input(
    "MTTR (horas)",
    min_value=1,
    value=25,
    help="Tempo M√©dio Para Reparo"
)

st.sidebar.divider()

st.sidebar.subheader("Manuten√ß√£o Preventiva")
horas_pm_mes = st.sidebar.number_input(
    "Horas de PM Planejadas no M√™s",
    min_value=0,
    value=16,
    help="Total de horas de paradas planejadas para manuten√ß√£o preventiva"
)

st.sidebar.divider()

st.sidebar.subheader("Utiliza√ß√£o Esperada")
horas_operacao_planejadas = st.sidebar.number_input(
    "Horas de Opera√ß√£o Planejadas no M√™s",
    min_value=0,
    value=600,
    help="Quantas horas voc√™ planeja usar o equipamento (demanda operacional)"
)

# ==================== C√ÅLCULOS ====================

# Converter percentuais para decimais
df_meta_decimal = df_meta / 100
uf_meta_decimal = uf_meta / 100

# Horas no m√™s (considerando 30 dias √ó 24 horas)
HORAS_CALENDARIO = 30 * 24  # 720 horas

# ===== C√ÅLCULO DE DF =====
# 1. Downtime por falhas corretivas esperadas
falhas_esperadas_mes = HORAS_CALENDARIO / mtbf
downtime_corretivo = falhas_esperadas_mes * mttr

# 2. Downtime total (corretivo + preventivo)
downtime_total = downtime_corretivo + horas_pm_mes

# 3. DF Projetada
horas_disponiveis = HORAS_CALENDARIO - downtime_total
df_projetada = horas_disponiveis / HORAS_CALENDARIO

# ===== C√ÅLCULO DE UF =====
# UF = Horas Operadas / Horas Dispon√≠veis
# Limitado pelas horas dispon√≠veis (n√£o pode operar mais do que est√° dispon√≠vel)
horas_operadas_possiveis = min(horas_operacao_planejadas, horas_disponiveis)
uf_projetada = horas_operadas_possiveis / horas_disponiveis if horas_disponiveis > 0 else 0

# ===== VERIFICA√á√ÉO DE METAS =====
atinge_df = df_projetada >= df_meta_decimal
atinge_uf = uf_projetada >= uf_meta_decimal
gap_df = df_projetada - df_meta_decimal
gap_uf = uf_projetada - uf_meta_decimal

# ==================== EXIBI√á√ÉO DOS RESULTADOS ====================

st.header(f"üìä An√°lise: {nome_equipamento}")

# M√©tricas principais
col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric(
        "DF Projetada",
        f"{df_projetada:.1%}",
        delta=f"{gap_df:.1%} vs Meta",
        delta_color="normal" if atinge_df else "inverse",
        help="Disponibilidade F√≠sica esperada"
    )

with col2:
    st.metric(
        "Meta de DF",
        f"{df_meta_decimal:.1%}",
        help="Objetivo de Disponibilidade F√≠sica"
    )

with col3:
    st.metric(
        "UF Projetada",
        f"{uf_projetada:.1%}",
        delta=f"{gap_uf:.1%} vs Meta",
        delta_color="normal" if atinge_uf else "inverse",
        help="Fator de Utiliza√ß√£o esperado"
    )

with col4:
    st.metric(
        "Meta de UF",
        f"{uf_meta_decimal:.1%}",
        help="Objetivo de Utiliza√ß√£o"
    )

st.divider()

# An√°lise detalhada
st.subheader("üîç An√°lise Detalhada")

col_a, col_b = st.columns(2)

with col_a:
    st.markdown("### ‚è±Ô∏è Breakdown de Horas no M√™s")
    
    with st.container(border=True):
        st.markdown(f"**Horas no Calend√°rio:** {HORAS_CALENDARIO}h")
        st.markdown(f"**Downtime Corretivo:** {downtime_corretivo:.1f}h ({falhas_esperadas_mes:.2f} falhas esperadas)")
        st.markdown(f"**Downtime Preventivo:** {horas_pm_mes:.1f}h")
        st.markdown(f"**Downtime Total:** {downtime_total:.1f}h")
        st.markdown(f"---")
        st.markdown(f"**‚úÖ Horas Dispon√≠veis:** {horas_disponiveis:.1f}h")
        st.markdown(f"**üîß Horas Operadas (planejadas):** {horas_operadas_possiveis:.1f}h")
        st.markdown(f"**‚è∏Ô∏è Horas Dispon√≠veis n√£o Utilizadas:** {horas_disponiveis - horas_operadas_possiveis:.1f}h")

with col_b:
    st.markdown("### üìã Status das Metas")
    
    # Status DF
    if atinge_df:
        st.success(
            f"‚úÖ **META DE DF ATING√çVEL**\n\n"
            f"DF Projetada: **{df_projetada:.1%}**\n\n"
            f"Meta: **{df_meta_decimal:.1%}**\n\n"
            f"Margem: **+{gap_df:.1%}**"
        )
    else:
        st.error(
            f"‚ùå **META DE DF N√ÉO ATING√çVEL**\n\n"
            f"DF Projetada: **{df_projetada:.1%}**\n\n"
            f"Meta: **{df_meta_decimal:.1%}**\n\n"
            f"Gap: **{gap_df:.1%}**"
        )
    
    st.markdown("---")
    
    # Status UF
    if atinge_uf:
        st.success(
            f"‚úÖ **META DE UF ATING√çVEL**\n\n"
            f"UF Projetada: **{uf_projetada:.1%}**\n\n"
            f"Meta: **{uf_meta_decimal:.1%}**\n\n"
            f"Margem: **+{gap_uf:.1%}**"
        )
    else:
        st.warning(
            f"‚ö†Ô∏è **META DE UF N√ÉO ATING√çVEL**\n\n"
            f"UF Projetada: **{uf_projetada:.1%}**\n\n"
            f"Meta: **{uf_meta_decimal:.1%}**\n\n"
            f"Gap: **{gap_uf:.1%}**"
        )
        
        if horas_operacao_planejadas > horas_disponiveis:
            st.info(
                f"üí° **Aten√ß√£o:** Voc√™ planejou operar {horas_operacao_planejadas}h, "
                f"mas o equipamento s√≥ estar√° dispon√≠vel por {horas_disponiveis:.1f}h. "
                f"O UF est√° limitado pela disponibilidade."
            )

st.divider()

# Recomenda√ß√µes
if not atinge_df:
    st.subheader("üí° Recomenda√ß√µes para Atingir a Meta de DF")
    
    # Calcular downtime m√°ximo permitido
    downtime_maximo = HORAS_CALENDARIO * (1 - df_meta_decimal)
    reducao_necessaria = downtime_total - downtime_maximo
    
    st.info(f"Para atingir {df_meta:.1f}% de DF, o downtime total n√£o pode exceder **{downtime_maximo:.1f}h**. "
            f"Atualmente est√° projetado em **{downtime_total:.1f}h**. "
            f"Necess√°rio reduzir em **{reducao_necessaria:.1f}h**.")
    
    col_rec1, col_rec2 = st.columns(2)
    
    with col_rec1:
        # Op√ß√£o 1: Reduzir MTTR
        mttr_necessario = (downtime_maximo - horas_pm_mes) / falhas_esperadas_mes
        if mttr_necessario > 0:
            reducao_mttr = mttr - mttr_necessario
            st.markdown(f"""
            **Op√ß√£o 1: Melhorar Manutenabilidade**
            - Reduzir MTTR de **{mttr}h** para **{mttr_necessario:.1f}h**
            - Redu√ß√£o necess√°ria: **{reducao_mttr:.1f}h** ({reducao_mttr/mttr*100:.1f}%)
            """)
    
    with col_rec2:
        # Op√ß√£o 2: Aumentar MTBF
        mtbf_necessario = HORAS_CALENDARIO / ((downtime_maximo - horas_pm_mes) / mttr)
        aumento_mtbf = mtbf_necessario - mtbf
        st.markdown(f"""
        **Op√ß√£o 2: Melhorar Confiabilidade**
        - Aumentar MTBF de **{mtbf}h** para **{mtbf_necessario:.1f}h**
        - Aumento necess√°rio: **{aumento_mtbf:.1f}h** ({aumento_mtbf/mtbf*100:.1f}%)
        """)

# Informa√ß√µes adicionais
with st.expander("‚ÑπÔ∏è Defini√ß√µes e Conceitos"):
    st.markdown("""
    ### Disponibilidade F√≠sica (DF)
    Percentual do tempo em que o equipamento est√° **fisicamente dispon√≠vel** para operar (n√£o quebrado, n√£o em manuten√ß√£o).

    
    $$DF = \\frac{\\text{Horas Calend√°rio} - \\text{Downtime Total}}{\\text{Horas Calend√°rio}}$$
    
    ### Fator de Utiliza√ß√£o (UF)
    Do tempo que o equipamento est√° dispon√≠vel, quanto foi **efetivamente utilizado** (demanda operacional).

    
    $$UF = \\frac{\\text{Horas Operadas}}{\\text{Horas Dispon√≠veis}}$$
    
    ### MTBF (Mean Time Between Failures)
    Tempo m√©dio entre falhas. Quanto **maior**, melhor a confiabilidade.
    
    ### MTTR (Mean Time To Repair)
    Tempo m√©dio para reparo. Quanto **menor**, melhor a manutenabilidade.
    
    ### Rela√ß√£o entre DF e UF
    - **DF** depende da confiabilidade e manuten√ß√£o do equipamento
    - **UF** depende da demanda operacional e da DF
    - Um equipamento pode ter alta DF mas baixa UF (dispon√≠vel mas n√£o usado)
    - Um equipamento n√£o pode ter alta UF se tiver baixa DF (n√£o pode usar o que n√£o est√° dispon√≠vel)
    """)
