# app.py

import streamlit as st
from datetime import datetime
from core import (
    df_from_mtbf_mttr,
    calculate_operational_df,
    mttr_for_df,
    mtbf_for_df,
    formatar_percentual
)

# ==================== CONFIGURA√á√ÉO DA P√ÅGINA ====================
st.set_page_config(
    page_title="Simulador de Metas",
    page_icon="üéØ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ==================== INICIALIZA√á√ÉO DO SESSION STATE ====================
# <<< MUDAN√áA AQUI: Valores agora s√£o percentuais (0-100) >>>
if 'df_meta' not in st.session_state:
    st.session_state.df_meta = 92.0  # 92%
if 'uf_meta' not in st.session_state:
    st.session_state.uf_meta = 85.0  # 85%
if 'mtbf' not in st.session_state:
    st.session_state.mtbf = 500
if 'mttr' not in st.session_state:
    st.session_state.mttr = 25
if 'pm_downtime_mensal' not in st.session_state:
    st.session_state.pm_downtime_mensal = 8

# ==================== CABE√áALHO ====================
st.title("üéØ Simulador de Metas Operacionais")
st.markdown("Analise a viabilidade das suas metas de Disponibilidade F√≠sica (DF) e Fator de Utiliza√ß√£o (UF).")

# ==================== BARRA LATERAL - INPUTS ====================
with st.sidebar:
    st.header("‚öôÔ∏è Par√¢metros de Simula√ß√£o")
    
    st.subheader("Metas Operacionais")
    st.slider(
        "Meta de DF (%)",
        min_value=80.0,
        max_value=100.0,
        key='df_meta',
        format="%.1f%%",
        help="Disponibilidade F√≠sica alvo"
    )
    st.slider(
        "Meta de UF (%)",
        min_value=50.0,
        max_value=100.0,
        key='uf_meta',
        format="%.1f%%",
        help="Fator de Utiliza√ß√£o alvo"
    )
    
    st.divider()
    st.subheader("Confiabilidade do Ativo")
    st.number_input(
        "MTBF (horas)",
        min_value=1,
        key='mtbf',
        help="Tempo M√©dio Entre Falhas"
    )
    st.number_input(
        "MTTR (horas)",
        min_value=1,
        key='mttr',
        help="Tempo M√©dio Para Reparo"
    )
    
    st.divider()
    st.subheader("Manuten√ß√£o Preventiva")
    st.number_input(
        "Downtime PM Mensal (horas)",
        min_value=0,
        key='pm_downtime_mensal',
        help="Horas de parada para manuten√ß√£o preventiva por m√™s"
    )

# ==================== C√ÅLCULOS PRINCIPAIS ====================
# <<< MUDAN√áA AQUI: Converter percentuais para decimais para os c√°lculos >>>
df_meta_decimal = st.session_state.df_meta / 100.0
uf_meta_decimal = st.session_state.uf_meta / 100.0

# Constantes
HORAS_ANO = 8760
pm_downtime_anual = st.session_state.pm_downtime_mensal * 12

# C√°lculos
df_inerente = df_from_mtbf_mttr(st.session_state.mtbf, st.session_state.mttr)
df_operacional = calculate_operational_df(df_inerente, pm_downtime_anual, HORAS_ANO)
mttr_necessario = mttr_for_df(st.session_state.mtbf, df_meta_decimal)
mtbf_necessario = mtbf_for_df(st.session_state.mttr, df_meta_decimal)

# ==================== DASHBOARD PRINCIPAL ====================
st.header("üìä Resultados da Simula√ß√£o")

col1, col2, col3 = st.columns(3)

with col1:
    st.metric(
        label="DF Inerente",
        value=formatar_percentual(df_inerente),
        help="Disponibilidade te√≥rica m√°xima (MTBF / (MTBF + MTTR))"
    )

with col2:
    delta = df_operacional - df_meta_decimal
    st.metric(
        label="DF Operacional",
        value=formatar_percentual(df_operacional),
        delta=formatar_percentual(delta),
        delta_color="normal" if delta >= 0 else "inverse",
        help="DF realista, considerando paradas para PM"
    )

with col3:
    st.metric(
        label="Meta de DF",
        value=formatar_percentual(df_meta_decimal),
        help="Seu objetivo de Disponibilidade F√≠sica"
    )

# ==================== AN√ÅLISE DE VIABILIDADE ====================
st.divider()
st.subheader("üîç An√°lise de Viabilidade")

if df_operacional >= df_meta_decimal:
    st.success(
        f"‚úÖ **Meta Ating√≠vel!** A DF operacional projetada de **{formatar_percentual(df_operacional)}** "
        f"supera a meta de **{formatar_percentual(df_meta_decimal)}**."
    )
else:
    st.warning(
        f"‚ö†Ô∏è **Meta N√£o Ating√≠vel.** A DF operacional projetada √© de apenas **{formatar_percentual(df_operacional)}**, "
        f"abaixo da meta de **{formatar_percentual(df_meta_decimal)}**."
    )
    
    st.markdown("### üí° A√ß√µes Necess√°rias")
    st.markdown(
        f"Para atingir a meta de **{formatar_percentual(df_meta_decimal)}**, voc√™ precisa de **uma** das seguintes melhorias:"
    )
    
    col_a, col_b = st.columns(2)
    with col_a:
        with st.container(border=True):
            st.markdown("**Op√ß√£o 1: Melhorar Manutenabilidade**")
            st.metric(
                "MTTR Necess√°rio",
                f"{mttr_necessario:.1f}h",
                delta=f"{mttr_necessario - st.session_state.mttr:.1f}h",
                delta_color="inverse"
            )
            st.caption(f"(mantendo MTBF = {st.session_state.mtbf}h)")
    
    with col_b:
        with st.container(border=True):
            st.markdown("**Op√ß√£o 2: Melhorar Confiabilidade**")
            st.metric(
                "MTBF Necess√°rio",
                f"{mtbf_necessario:.1f}h",
                delta=f"{mtbf_necessario - st.session_state.mtbf:.1f}h",
                delta_color="normal"
            )
            st.caption(f"(mantendo MTTR = {st.session_state.mttr}h)")
