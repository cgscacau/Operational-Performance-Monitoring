# app.py

import streamlit as st

# ==================== CONFIGURA√á√ÉO ====================
st.set_page_config(
    page_title="An√°lise de Metas de DF e UF",
    page_icon="üéØ",
    layout="wide"
)

st.title("üéØ An√°lise de Metas: Disponibilidade F√≠sica (DF) e Utiliza√ß√£o (UF)")
st.markdown("Verifique se seus equipamentos atingir√£o as metas de DF e UF do m√™s.")

# ==================== ENTRADAS ====================
st.sidebar.header("üìã Configura√ß√£o")

st.sidebar.subheader("Metas do M√™s")
df_meta = st.sidebar.number_input(
    "Meta de DF (%)",
    min_value=0.0,
    max_value=100.0,
    value=92.0,
    step=0.1,
    help="Disponibilidade F√≠sica: % do tempo que o equipamento est√° dispon√≠vel (n√£o quebrado)"
)

uf_meta = st.sidebar.number_input(
    "Meta de UF (%)",
    min_value=0.0,
    max_value=100.0,
    value=85.0,
    step=0.1,
    help="Fator de Utiliza√ß√£o: % do tempo dispon√≠vel que o equipamento ser√° efetivamente usado"
)

st.sidebar.divider()

st.sidebar.subheader("Dados de Confiabilidade")

modo_entrada = st.sidebar.radio(
    "Como voc√™ quer informar os dados?",
    options=[
        "Informar MTBF e MTTR",
        "Calcular MTTR (tenho DF atual e MTBF)",
        "Calcular MTBF (tenho DF atual e MTTR)"
    ],
    help="Escolha o modo de entrada baseado nos dados que voc√™ possui"
)

# Vari√°veis que ser√£o calculadas
mtbf = None
mttr = None
df_atual_informada = None

if modo_entrada == "Informar MTBF e MTTR":
    mtbf = st.sidebar.number_input(
        "MTBF (horas)",
        min_value=1,
        value=500,
        help="Tempo M√©dio Entre Falhas"
    )
    
    mttr = st.sidebar.number_input(
        "MTTR (horas)",
        min_value=1,
        value=25,
        help="Tempo M√©dio Para Reparo"
    )

elif modo_entrada == "Calcular MTTR (tenho DF atual e MTBF)":
    df_atual_informada = st.sidebar.number_input(
        "DF Atual/Real (%)",
        min_value=0.1,
        max_value=99.9,
        value=90.0,
        step=0.1,
        help="Disponibilidade F√≠sica atual do equipamento (sem considerar PM)"
    )
    
    mtbf = st.sidebar.number_input(
        "MTBF (horas)",
        min_value=1,
        value=500,
        help="Tempo M√©dio Entre Falhas"
    )
    
    df_atual_decimal = df_atual_informada / 100
    mttr = (mtbf * (1 - df_atual_decimal)) / df_atual_decimal
    
    st.sidebar.success(f"‚úÖ **MTTR Calculado:** {mttr:.1f} horas")

elif modo_entrada == "Calcular MTBF (tenho DF atual e MTTR)":
    df_atual_informada = st.sidebar.number_input(
        "DF Atual/Real (%)",
        min_value=0.1,
        max_value=99.9,
        value=90.0,
        step=0.1,
        help="Disponibilidade F√≠sica atual do equipamento (sem considerar PM)"
    )
    
    mttr = st.sidebar.number_input(
        "MTTR (horas)",
        min_value=1,
        value=25,
        help="Tempo M√©dio Para Reparo"
    )
    
    df_atual_decimal = df_atual_informada / 100
    mtbf = (mttr * df_atual_decimal) / (1 - df_atual_decimal)
    
    st.sidebar.success(f"‚úÖ **MTBF Calculado:** {mtbf:.1f} horas")

st.sidebar.divider()

st.sidebar.subheader("Manuten√ß√£o Preventiva")
horas_pm_mes = st.sidebar.number_input(
    "Horas de PM Planejadas no M√™s",
    min_value=0,
    value=16,
    help="Total de horas de paradas planejadas para manuten√ß√£o preventiva"
)

# ==================== C√ÅLCULOS ====================

# Converter percentuais para decimais
df_meta_decimal = df_meta / 100
uf_meta_decimal = uf_meta / 100

# Horas no m√™s (considerando 30 dias √ó 24 horas)
HORAS_CALENDARIO = 30 * 24  # 720 horas

# ===== C√ÅLCULO DE DF =====
# 1. Downtime por falhas corretivas esperadas
falhas_esperadas_mes = HORAS_CALENDARIO / mtbf
downtime_corretivo = falhas_esperadas_mes * mttr

# 2. Downtime total (corretivo + preventivo)
downtime_total = downtime_corretivo + horas_pm_mes

# 3. Horas Dispon√≠veis e DF Projetada
horas_disponiveis = HORAS_CALENDARIO - downtime_total
df_projetada = horas_disponiveis / HORAS_CALENDARIO

# 4. DF Inerente (sem PM)
df_inerente = mtbf / (mtbf + mttr)

# <<< NOVO C√ÅLCULO: PM M√°ximo Permitido >>>
# Calcular o downtime m√°ximo permitido para atingir a meta
downtime_maximo_permitido = HORAS_CALENDARIO * (1 - df_meta_decimal)
# PM m√°ximo = Downtime m√°ximo - Downtime corretivo
pm_maximo_permitido = downtime_maximo_permitido - downtime_corretivo
# N√£o pode ser negativo
pm_maximo_permitido = max(0, pm_maximo_permitido)

# Diferen√ßa entre PM planejado e PM m√°ximo
diferenca_pm = horas_pm_mes - pm_maximo_permitido

# ===== C√ÅLCULO DE UF =====
horas_operacao_necessarias = uf_meta_decimal * horas_disponiveis
uf_projetada = uf_meta_decimal if horas_disponiveis > 0 else 0

# ===== VERIFICA√á√ÉO DE METAS =====
atinge_df = df_projetada >= df_meta_decimal
atinge_uf = horas_disponiveis >= horas_operacao_necessarias
gap_df = df_projetada - df_meta_decimal

# ==================== EXIBI√á√ÉO DOS RESULTADOS ====================

st.header("üìä Resultados da An√°lise")

if modo_entrada != "Informar MTBF e MTTR":
    st.info(f"‚ÑπÔ∏è **Modo de C√°lculo:** {modo_entrada}")

# M√©tricas principais
col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric(
        "DF Inerente",
        f"{df_inerente:.1%}",
        help="DF te√≥rica sem considerar PM (baseada em MTBF e MTTR)"
    )

with col2:
    st.metric(
        "DF Projetada",
        f"{df_projetada:.1%}",
        delta=f"{gap_df:.1%} vs Meta",
        delta_color="normal" if atinge_df else "inverse",
        help="Disponibilidade F√≠sica esperada (incluindo PM)"
    )

with col3:
    st.metric(
        "Meta de DF",
        f"{df_meta_decimal:.1%}",
        help="Objetivo de Disponibilidade F√≠sica"
    )

with col4:
    st.metric(
        "Meta de UF",
        f"{uf_meta_decimal:.1%}",
        help="Objetivo de Utiliza√ß√£o"
    )

st.divider()

# <<< NOVA SE√á√ÉO: An√°lise de PM >>>
st.subheader("üîß An√°lise de Manuten√ß√£o Preventiva")

col_pm1, col_pm2, col_pm3 = st.columns(3)

with col_pm1:
    st.metric(
        "PM Planejado",
        f"{horas_pm_mes:.1f}h",
        help="Horas de PM que voc√™ est√° planejando"
    )

with col_pm2:
    cor_delta_pm = "inverse" if diferenca_pm > 0 else "normal"
    st.metric(
        "PM M√°ximo Permitido",
        f"{pm_maximo_permitido:.1f}h",
        delta=f"{-diferenca_pm:.1f}h" if diferenca_pm > 0 else f"+{-diferenca_pm:.1f}h",
        delta_color=cor_delta_pm,
        help=f"M√°ximo de horas de PM para atingir {df_meta:.1f}% de DF"
    )

with col_pm3:
    if diferenca_pm > 0:
        st.metric(
            "Status PM",
            "‚ö†Ô∏è ACIMA",
            delta=f"+{diferenca_pm:.1f}h",
            delta_color="inverse",
            help="PM planejado excede o m√°ximo permitido"
        )
    else:
        st.metric(
            "Status PM",
            "‚úÖ OK",
            delta=f"{abs(diferenca_pm):.1f}h de margem",
            delta_color="normal",
            help="PM planejado est√° dentro do limite"
        )

# Alerta visual se PM estiver acima do permitido
if diferenca_pm > 0:
    st.warning(
        f"‚ö†Ô∏è **Aten√ß√£o:** Suas {horas_pm_mes:.1f}h de PM planejadas excedem o m√°ximo permitido de "
        f"**{pm_maximo_permitido:.1f}h** para atingir a meta de DF de {df_meta:.1f}%. "
        f"Voc√™ precisa reduzir em **{diferenca_pm:.1f}h** ou melhorar MTBF/MTTR."
    )
elif pm_maximo_permitido > horas_pm_mes:
    st.success(
        f"‚úÖ Voc√™ tem **{pm_maximo_permitido - horas_pm_mes:.1f}h** de margem para PM adicional "
        f"e ainda atingir a meta de DF de {df_meta:.1f}%."
    )

st.divider()

# M√©tricas de Confiabilidade
st.subheader("üìà Par√¢metros de Confiabilidade")

col_conf1, col_conf2, col_conf3 = st.columns(3)

with col_conf1:
    st.metric(
        "MTBF",
        f"{mtbf:.1f}h",
        help="Tempo M√©dio Entre Falhas"
    )

with col_conf2:
    st.metric(
        "MTTR",
        f"{mttr:.1f}h",
        help="Tempo M√©dio Para Reparo"
    )

with col_conf3:
    st.metric(
        "Horas de Opera√ß√£o Necess√°rias",
        f"{horas_operacao_necessarias:.0f}h",
        help="Para atingir a meta de UF"
    )

st.divider()

# An√°lise detalhada
st.subheader("üîç An√°lise Detalhada")

col_a, col_b = st.columns(2)

with col_a:
    st.markdown("### ‚è±Ô∏è Breakdown de Horas no M√™s")
    
    with st.container(border=True):
        st.markdown(f"**Horas no Calend√°rio:** {HORAS_CALENDARIO}h")
        st.markdown(f"**Falhas Esperadas:** {falhas_esperadas_mes:.2f}")
        st.markdown(f"**Downtime Corretivo:** {downtime_corretivo:.1f}h")
        st.markdown(f"**Downtime Preventivo:** {horas_pm_mes:.1f}h")
        st.markdown(f"**Downtime Total:** {downtime_total:.1f}h")
        st.markdown(f"**Downtime M√°ximo Permitido:** {downtime_maximo_permitido:.1f}h")
        st.markdown(f"---")
        st.markdown(f"**‚úÖ Horas Dispon√≠veis:** {horas_disponiveis:.1f}h")
        st.markdown(f"**üéØ Horas de Opera√ß√£o Necess√°rias (UF={uf_meta:.1f}%):** {horas_operacao_necessarias:.1f}h")
        st.markdown(f"**‚è∏Ô∏è Horas Dispon√≠veis Ociosas:** {horas_disponiveis - horas_operacao_necessarias:.1f}h")

with col_b:
    st.markdown("### üìã Status das Metas")
    
    # Status DF
    if atinge_df:
        st.success(
            f"‚úÖ **META DE DF ATING√çVEL**\n\n"
            f"DF Projetada: **{df_projetada:.1%}**\n\n"
            f"Meta: **{df_meta_decimal:.1%}**\n\n"
            f"Margem: **+{gap_df:.1%}**"
        )
    else:
        st.error(
            f"‚ùå **META DE DF N√ÉO ATING√çVEL**\n\n"
            f"DF Projetada: **{df_projetada:.1%}**\n\n"
            f"Meta: **{df_meta_decimal:.1%}**\n\n"
            f"Gap: **{gap_df:.1%}**"
        )
    
    st.markdown("---")
    
    # Status UF
    if atinge_uf:
        st.success(
            f"‚úÖ **META DE UF VI√ÅVEL**\n\n"
            f"Horas dispon√≠veis: **{horas_disponiveis:.1f}h**\n\n"
            f"Horas necess√°rias: **{horas_operacao_necessarias:.1f}h**"
        )
    else:
        st.error(
            f"‚ùå **META DE UF INVI√ÅVEL**\n\n"
            f"Horas dispon√≠veis: **{horas_disponiveis:.1f}h**\n\n"
            f"Horas necess√°rias: **{horas_operacao_necessarias:.1f}h**"
        )
        
        uf_maxima = (horas_disponiveis / horas_operacao_necessarias) * uf_meta_decimal if horas_operacao_necessarias > 0 else 0
        st.info(f"üí° UF m√°ximo ating√≠vel: **{uf_maxima:.1%}**")

st.divider()

# Recomenda√ß√µes
if not atinge_df:
    st.subheader("üí° Recomenda√ß√µes para Atingir a Meta de DF")
    
    st.info(f"Para atingir {df_meta:.1f}% de DF, o downtime total n√£o pode exceder **{downtime_maximo_permitido:.1f}h**. "
            f"Atualmente est√° projetado em **{downtime_total:.1f}h**.")
    
    col_rec1, col_rec2, col_rec3 = st.columns(3)
    
    with col_rec1:
        # Op√ß√£o 1: Reduzir MTTR
        mttr_necessario = (downtime_maximo_permitido - horas_pm_mes) / falhas_esperadas_mes
        if mttr_necessario > 0:
            reducao_mttr = mttr - mttr_necessario
            st.markdown(f"""
            **Op√ß√£o 1: Melhorar Manutenabilidade**
            - Reduzir MTTR para **{mttr_necessario:.1f}h**
            - Redu√ß√£o: **{reducao_mttr:.1f}h** ({reducao_mttr/mttr*100:.1f}%)
            """)
    
    with col_rec2:
        # Op√ß√£o 2: Aumentar MTBF
        mtbf_necessario = HORAS_CALENDARIO / ((downtime_maximo_permitido - horas_pm_mes) / mttr)
        aumento_mtbf = mtbf_necessario - mtbf
        st.markdown(f"""
        **Op√ß√£o 2: Melhorar Confiabilidade**
        - Aumentar MTBF para **{mtbf_necessario:.1f}h**
        - Aumento: **{aumento_mtbf:.1f}h** ({aumento_mtbf/mtbf*100:.1f}%)
        """)
    
    with col_rec3:
        # Op√ß√£o 3: Reduzir PM
        if pm_maximo_permitido > 0:
            reducao_pm = horas_pm_mes - pm_maximo_permitido
            st.markdown(f"""
            **Op√ß√£o 3: Otimizar PM**
            - Reduzir PM para **{pm_maximo_permitido:.1f}h**
            - Redu√ß√£o: **{reducao_pm:.1f}h** ({reducao_pm/horas_pm_mes*100:.1f}%)
            """)
        else:
            st.markdown(f"""
            **Op√ß√£o 3: Otimizar PM**
            - ‚ö†Ô∏è Mesmo sem PM, a meta n√£o seria ating√≠vel
            - √â necess√°rio melhorar MTBF ou MTTR
            """)

# Informa√ß√µes adicionais
with st.expander("‚ÑπÔ∏è Defini√ß√µes e F√≥rmulas"):
    st.markdown("""
    ### PM M√°ximo Permitido
    Calculado como:

    $$PM_{max} = \\text{Downtime M√°ximo Permitido} - \\text{Downtime Corretivo}$$
    
    Onde:

    $$\\text{Downtime M√°ximo} = \\text{Horas Calend√°rio} \\times (1 - DF_{meta})$$
    
    ### Disponibilidade F√≠sica (DF)

    $$DF = \\frac{\\text{Horas Calend√°rio} - \\text{Downtime Total}}{\\text{Horas Calend√°rio}}$$
    
    ### DF Inerente (sem PM)

    $$DF_{inerente} = \\frac{MTBF}{MTBF + MTTR}$$
    
    ### C√°lculos Reversos
    **Com DF e MTBF, calcular MTTR:**

    $$MTTR = \\frac{MTBF \\times (1 - DF)}{DF}$$
    
    **Com DF e MTTR, calcular MTBF:**

    $$MTBF = \\frac{MTTR \\times DF}{1 - DF}$$
    """)
