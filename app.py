# app.py

import streamlit as st

# ==================== CONFIGURA√á√ÉO ====================
st.set_page_config(
    page_title="An√°lise de Metas de DF e UF",
    page_icon="üéØ",
    layout="wide"
)

st.title("üéØ An√°lise de Metas: Disponibilidade F√≠sica (DF) e Utiliza√ß√£o (UF)")
st.markdown("Verifique se seus equipamentos atingir√£o as metas de DF e UF do m√™s.")

# ==================== ENTRADAS ====================
st.sidebar.header("üìã Configura√ß√£o")

st.sidebar.subheader("Metas do M√™s")
df_meta = st.sidebar.number_input(
    "Meta de DF (%)",
    min_value=0.0,
    max_value=100.0,
    value=92.0,
    step=0.1,
    help="Disponibilidade F√≠sica: % do tempo que o equipamento est√° dispon√≠vel (n√£o quebrado)"
)

uf_meta = st.sidebar.number_input(
    "Meta de UF (%)",
    min_value=0.0,
    max_value=100.0,
    value=85.0,
    step=0.1,
    help="Fator de Utiliza√ß√£o: % do tempo dispon√≠vel que o equipamento ser√° efetivamente usado"
)

st.sidebar.divider()

st.sidebar.subheader("Dados do Equipamento")
nome_equipamento = st.sidebar.text_input(
    "Nome/ID do Equipamento",
    value="CAM-001",
    help="Identifica√ß√£o do equipamento"
)

mtbf = st.sidebar.number_input(
    "MTBF (horas)",
    min_value=1,
    value=500,
    help="Tempo M√©dio Entre Falhas"
)

mttr = st.sidebar.number_input(
    "MTTR (horas)",
    min_value=1,
    value=25,
    help="Tempo M√©dio Para Reparo"
)

st.sidebar.divider()

st.sidebar.subheader("Manuten√ß√£o Preventiva")
horas_pm_mes = st.sidebar.number_input(
    "Horas de PM Planejadas no M√™s",
    min_value=0,
    value=16,
    help="Total de horas de paradas planejadas para manuten√ß√£o preventiva"
)

# ==================== C√ÅLCULOS ====================

# Converter percentuais para decimais
df_meta_decimal = df_meta / 100
uf_meta_decimal = uf_meta / 100

# Horas no m√™s (considerando 30 dias √ó 24 horas)
HORAS_CALENDARIO = 30 * 24  # 720 horas

# ===== C√ÅLCULO DE DF =====
# 1. Downtime por falhas corretivas esperadas
falhas_esperadas_mes = HORAS_CALENDARIO / mtbf
downtime_corretivo = falhas_esperadas_mes * mttr

# 2. Downtime total (corretivo + preventivo)
downtime_total = downtime_corretivo + horas_pm_mes

# 3. Horas Dispon√≠veis e DF Projetada
horas_disponiveis = HORAS_CALENDARIO - downtime_total
df_projetada = horas_disponiveis / HORAS_CALENDARIO

# ===== C√ÅLCULO DE UF =====
# <<< MUDAN√áA AQUI: Calculado automaticamente com base na meta de UF >>>
# Horas de opera√ß√£o necess√°rias para atingir a meta de UF
horas_operacao_necessarias = uf_meta_decimal * horas_disponiveis

# UF projetada (ser√° igual √† meta se houver horas dispon√≠veis suficientes)
uf_projetada = uf_meta_decimal if horas_disponiveis > 0 else 0

# ===== VERIFICA√á√ÉO DE METAS =====
atinge_df = df_projetada >= df_meta_decimal
# UF sempre "atinge" porque √© uma meta de demanda, n√£o de capacidade
atinge_uf = horas_disponiveis >= horas_operacao_necessarias
gap_df = df_projetada - df_meta_decimal

# ==================== EXIBI√á√ÉO DOS RESULTADOS ====================

st.header(f"üìä An√°lise: {nome_equipamento}")

# M√©tricas principais
col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric(
        "DF Projetada",
        f"{df_projetada:.1%}",
        delta=f"{gap_df:.1%} vs Meta",
        delta_color="normal" if atinge_df else "inverse",
        help="Disponibilidade F√≠sica esperada"
    )

with col2:
    st.metric(
        "Meta de DF",
        f"{df_meta_decimal:.1%}",
        help="Objetivo de Disponibilidade F√≠sica"
    )

with col3:
    st.metric(
        "Meta de UF",
        f"{uf_meta_decimal:.1%}",
        help="Objetivo de Utiliza√ß√£o"
    )

with col4:
    st.metric(
        "Horas de Opera√ß√£o Necess√°rias",
        f"{horas_operacao_necessarias:.0f}h",
        help="Horas que precisam ser operadas para atingir a meta de UF"
    )

st.divider()

# An√°lise detalhada
st.subheader("üîç An√°lise Detalhada")

col_a, col_b = st.columns(2)

with col_a:
    st.markdown("### ‚è±Ô∏è Breakdown de Horas no M√™s")
    
    with st.container(border=True):
        st.markdown(f"**Horas no Calend√°rio:** {HORAS_CALENDARIO}h")
        st.markdown(f"**Downtime Corretivo:** {downtime_corretivo:.1f}h ({falhas_esperadas_mes:.2f} falhas esperadas)")
        st.markdown(f"**Downtime Preventivo:** {horas_pm_mes:.1f}h")
        st.markdown(f"**Downtime Total:** {downtime_total:.1f}h")
        st.markdown(f"---")
        st.markdown(f"**‚úÖ Horas Dispon√≠veis:** {horas_disponiveis:.1f}h")
        st.markdown(f"**üéØ Horas de Opera√ß√£o Necess√°rias (para UF={uf_meta:.1f}%):** {horas_operacao_necessarias:.1f}h")
        st.markdown(f"**‚è∏Ô∏è Horas Dispon√≠veis Ociosas:** {horas_disponiveis - horas_operacao_necessarias:.1f}h")

with col_b:
    st.markdown("### üìã Status das Metas")
    
    # Status DF
    if atinge_df:
        st.success(
            f"‚úÖ **META DE DF ATING√çVEL**\n\n"
            f"DF Projetada: **{df_projetada:.1%}**\n\n"
            f"Meta: **{df_meta_decimal:.1%}**\n\n"
            f"Margem: **+{gap_df:.1%}**"
        )
    else:
        st.error(
            f"‚ùå **META DE DF N√ÉO ATING√çVEL**\n\n"
            f"DF Projetada: **{df_projetada:.1%}**\n\n"
            f"Meta: **{df_meta_decimal:.1%}**\n\n"
            f"Gap: **{gap_df:.1%}**"
        )
    
    st.markdown("---")
    
    # Status UF
    if atinge_uf:
        st.success(
            f"‚úÖ **META DE UF VI√ÅVEL**\n\n"
            f"Horas dispon√≠veis: **{horas_disponiveis:.1f}h**\n\n"
            f"Horas necess√°rias para UF={uf_meta:.1f}%: **{horas_operacao_necessarias:.1f}h**\n\n"
            f"H√° capacidade suficiente para atingir a meta de utiliza√ß√£o."
        )
    else:
        st.error(
            f"‚ùå **META DE UF INVI√ÅVEL**\n\n"
            f"Horas dispon√≠veis: **{horas_disponiveis:.1f}h**\n\n"
            f"Horas necess√°rias para UF={uf_meta:.1f}%: **{horas_operacao_necessarias:.1f}h**\n\n"
            f"‚ö†Ô∏è **Problema:** N√£o h√° horas dispon√≠veis suficientes. "
            f"Mesmo operando 100% do tempo dispon√≠vel, n√£o ser√° poss√≠vel atingir a meta de UF."
        )
        
        uf_maxima = (horas_disponiveis / horas_operacao_necessarias) * uf_meta_decimal if horas_operacao_necessarias > 0 else 0
        st.info(f"üí° Com a DF projetada de {df_projetada:.1%}, o UF m√°ximo ating√≠vel seria **{uf_maxima:.1%}**")

st.divider()

# Recomenda√ß√µes
if not atinge_df:
    st.subheader("üí° Recomenda√ß√µes para Atingir a Meta de DF")
    
    # Calcular downtime m√°ximo permitido
    downtime_maximo = HORAS_CALENDARIO * (1 - df_meta_decimal)
    reducao_necessaria = downtime_total - downtime_maximo
    
    st.info(f"Para atingir {df_meta:.1f}% de DF, o downtime total n√£o pode exceder **{downtime_maximo:.1f}h**. "
            f"Atualmente est√° projetado em **{downtime_total:.1f}h**. "
            f"Necess√°rio reduzir em **{reducao_necessaria:.1f}h**.")
    
    col_rec1, col_rec2 = st.columns(2)
    
    with col_rec1:
        # Op√ß√£o 1: Reduzir MTTR
        mttr_necessario = (downtime_maximo - horas_pm_mes) / falhas_esperadas_mes
        if mttr_necessario > 0:
            reducao_mttr = mttr - mttr_necessario
            st.markdown(f"""
            **Op√ß√£o 1: Melhorar Manutenabilidade**
            - Reduzir MTTR de **{mttr}h** para **{mttr_necessario:.1f}h**
            - Redu√ß√£o necess√°ria: **{reducao_mttr:.1f}h** ({reducao_mttr/mttr*100:.1f}%)
            """)
    
    with col_rec2:
        # Op√ß√£o 2: Aumentar MTBF
        mtbf_necessario = HORAS_CALENDARIO / ((downtime_maximo - horas_pm_mes) / mttr)
        aumento_mtbf = mtbf_necessario - mtbf
        st.markdown(f"""
        **Op√ß√£o 2: Melhorar Confiabilidade**
        - Aumentar MTBF de **{mtbf}h** para **{mtbf_necessario:.1f}h**
        - Aumento necess√°rio: **{aumento_mtbf:.1f}h** ({aumento_mtbf/mtbf*100:.1f}%)
        """)

elif not atinge_uf:
    st.subheader("üí° Recomenda√ß√µes para Viabilizar a Meta de UF")
    
    st.warning(
        f"A meta de UF de **{uf_meta:.1f}%** requer **{horas_operacao_necessarias:.1f}h** de opera√ß√£o, "
        f"mas apenas **{horas_disponiveis:.1f}h** estar√£o dispon√≠veis."
    )
    
    st.markdown("**Op√ß√µes:**")
    st.markdown(f"1. **Melhorar a DF** para ter mais horas dispon√≠veis (veja recomenda√ß√µes acima)")
    st.markdown(f"2. **Revisar a meta de UF** para um valor mais realista (m√°ximo ating√≠vel: {(horas_disponiveis/horas_operacao_necessarias)*uf_meta:.1f}%)")

# Informa√ß√µes adicionais
with st.expander("‚ÑπÔ∏è Defini√ß√µes e Conceitos"):
    st.markdown("""
    ### Disponibilidade F√≠sica (DF)
    Percentual do tempo em que o equipamento est√° **fisicamente dispon√≠vel** para operar (n√£o quebrado, n√£o em manuten√ß√£o).

    
    $$DF = \\frac{\\text{Horas Calend√°rio} - \\text{Downtime Total}}{\\text{Horas Calend√°rio}}$$
    
    ### Fator de Utiliza√ß√£o (UF)
    Do tempo que o equipamento est√° dispon√≠vel, quanto ser√° **efetivamente utilizado** (demanda operacional).

    
    $$UF = \\frac{\\text{Horas Operadas}}{\\text{Horas Dispon√≠veis}}$$
    
    ### Rela√ß√£o entre Metas
    - A meta de **DF** define quantas horas o equipamento estar√° dispon√≠vel
    - A meta de **UF** define quantas dessas horas dispon√≠veis ser√£o usadas
    - **Horas de Opera√ß√£o Necess√°rias = UF Meta √ó Horas Dispon√≠veis**
    
    ### MTBF e MTTR
    - **MTBF:** Tempo m√©dio entre falhas (maior = melhor confiabilidade)
    - **MTTR:** Tempo m√©dio para reparo (menor = melhor manutenabilidade)
    """)
