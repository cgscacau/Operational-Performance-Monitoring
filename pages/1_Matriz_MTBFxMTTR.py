# pages/1_Matriz_MTBFxMTTR.py

import streamlit as st
import numpy as np
import plotly.graph_objects as go
from core import df_from_mtbf_mttr

st.set_page_config(layout="wide", page_icon="üó∫Ô∏è")

# --- INICIALIZA√á√ÉO DO SESSION STATE (C√ìPIA DA P√ÅGINA PRINCIPAL) ---
# <<< MUDAN√áA CR√çTICA AQUI
# Isso garante que, mesmo que o usu√°rio abra esta p√°gina primeiro,
# os valores padr√£o ser√£o carregados e o app n√£o vai quebrar.
if 'df_meta' not in st.session_state:
    st.session_state.df_meta = 0.92
if 'uf_meta' not in st.session_state:
    st.session_state.uf_meta = 0.85
if 'mtbf' not in st.session_state:
    st.session_state.mtbf = 500
if 'mttr' not in st.session_state:
    st.session_state.mttr = 25
if 'pm_downtime_mensal' not in st.session_state:
    st.session_state.pm_downtime_mensal = 8

# --- T√≠tulo da P√°gina ---
st.title("üó∫Ô∏è Matriz Interativa MTBF √ó MTTR ‚Üî DF")
st.markdown("Explore a rela√ß√£o entre confiabilidade (MTBF), manutenabilidade (MTTR) e a Disponibilidade F√≠sica (DF) resultante.")

# --- Ler os valores diretamente do session_state ---
# Agora podemos remover a verifica√ß√£o de 'st.stop()' porque garantimos que os valores sempre existir√£o.
mtbf_atual = st.session_state.mtbf
mttr_atual = st.session_state.mttr
df_meta_matriz = st.session_state.df_meta

# Adicionamos uma nota para o usu√°rio saber de onde v√™m os dados
st.info(f"O gr√°fico est√° usando os valores definidos na barra lateral: **MTBF = {mtbf_atual}h**, **MTTR = {mttr_atual}h**, **Meta DF = {df_meta_matriz:.2%}**.")

# --- Gera√ß√£o dos dados para o gr√°fico ---
mtbf_range = np.linspace(max(1, mtbf_atual * 0.2), mtbf_atual * 2, 50)
mttr_range = np.linspace(max(1, mttr_atual * 0.2), mttr_atual * 2, 50)

X_mtbf, Y_mttr = np.meshgrid(mtbf_range, mttr_range)
Z_df = df_from_mtbf_mttr(X_mtbf, Y_mttr)

# --- Cria√ß√£o do Gr√°fico com Plotly ---
fig = go.Figure()

fig.add_trace(go.Contour(
    z=Z_df,
    x=mtbf_range,
    y=mttr_range,
    colorscale='Viridis',
    contours_coloring='lines',
    line_width=2,
    contours=dict(
        start=0.8,
        end=0.99,
        size=0.01,
        showlabels=True,
        labelfont=dict(size=12, color='black')
    ),
    name='Isolinhas de DF'
))

fig.add_trace(go.Contour(
    z=Z_df,
    x=mtbf_range,
    y=mttr_range,
    contours_coloring='none',
    line_width=4,
    line_color='red',
    contours=dict(
        type='constraint',
        value=df_meta_matriz,
    ),
    name=f'Fronteira para {df_meta_matriz:.1%}'
))

df_atual = df_from_mtbf_mttr(mtbf_atual, mttr_atual)
fig.add_trace(go.Scatter(
    x=[mtbf_atual],
    y=[mttr_atual],
    mode='markers+text',
    marker=dict(color='red', size=15, symbol='x'),
    text=[f"Atual: {df_atual:.2%}"],
    textposition="bottom right",
    name='Situa√ß√£o Atual'
))

fig.update_layout(
    title=f'Fronteira de Viabilidade para Atingir {df_meta_matriz:.1%} de DF',
    xaxis_title="MTBF (horas) ‚Üí Melhor Confiabilidade",
    yaxis_title="MTTR (horas) ‚Üí Melhor Manutenabilidade",
    autosize=True,
    height=600,
    xaxis=dict(gridcolor='lightgrey'),
    yaxis=dict(gridcolor='lightgrey'),
    legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
)

st.plotly_chart(fig, use_container_width=True)

st.info(
    f"**Como ler o gr√°fico:** Qualquer combina√ß√£o de MTBF e MTTR na √°rea verde-claro (acima da linha vermelha) atinge a meta de **{df_meta_matriz:.1%}**. "
    f"Seu ponto atual est√° marcado com um 'X'. Para cruzar a fronteira, voc√™ precisa se mover para a direita (aumentar MTBF) ou para baixo (diminuir MTTR)."
)
